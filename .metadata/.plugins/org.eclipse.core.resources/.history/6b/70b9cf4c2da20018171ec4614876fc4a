package ass1;

import java.io.File;
import java.io.FileNotFoundException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Scanner;

public class HotelBookingSystem {
	private ArrayList<Hotel> hotels;
	
	public HotelBookingSystem() {
		this.hotels = new ArrayList<Hotel>();
	}
	
	public Hotel hotelExist(String hotelName) {
		
		for(Hotel h:hotels) {
			if(h.getHotelName().equals(hotelName)) {
				return h;
			}
		}
		return null;
	}
	public void makeNewHotel(String input) {
		// Create new instance of hotel booking system
        // each hotel has 1 booking system
        
        String[] allInput = input.split(" ");
		
        // Handles request for Hotel Creation
        
      	  ArrayList<Room> rooms  = new ArrayList<Room>();
      	  // create all the rooms and put it in a list
      	  for(int i =2; i <allInput.length;i+=2) {
      		  rooms.add(new Room(Integer.valueOf(allInput[i]), Integer.valueOf(allInput[i+1]), allInput[1]));
      		  //System.out.println(allInput[i]);
      		  //System.out.println(allInput[i+1]);
      		  //System.out.println(allInput[1]);
      	  }
      	  Hotel h = hotelExist(allInput[1]);
      	  if(h==null) {
    		  Hotel x = new Hotel(allInput[1], rooms);
    		  hotels.add(x);
    	  } else {
    		  h.addRoom(rooms);
    	  }
      	  
	}
	
	public ArrayList<Room> findARoom(int ws, int wd, int wt, LocalDate start, LocalDate end) {
		ArrayList <Room> result = new ArrayList<Room>();
		int s = 0;// single room in the hotel
		int d = 0;
		int t = 0;
		int found=0;
		Hotel foundHotel = null;
		for(Hotel h : hotels) {
			ArrayList<Room> hotelRooms = h.getRoom();
			/*if(hotelRooms.isEmpty()) {
				System.out.println("Hotel "+h.getHotelName()+" is empty");
				
			} else {
				System.out.println("Hotel "+h.getHotelName()+" is NOT empty");
			}*/
			Booking b = null;
			s=0;
			d=0;
			t=0;
			
			for(Room r : hotelRooms) {
				// b is the booking for that room
				b=r.getBooking();
				if(b==null) {
					//System.out.println("Here");
					if(r.getCapacity()==1 && s<ws) {
						s++;
					} else if(r.getCapacity()==2 && d<wd) {
						d++;
					} else if(r.getCapacity()==3 && t<wt) {
						t++;
					}
					
				} else {
					// check the date first
					LocalDate bookingStart = b.getStart(); // start date of that room
					LocalDate bookingEnd = b.getEnd(); //end date of that room
					if(bookingStart.isAfter(end)||bookingStart.isEqual(end)||bookingEnd.isBefore(start) || bookingEnd.isEqual(start)) {
						
						// now check the capacity
						if(r.getCapacity()==1) {
							s++;
						} else if(r.getCapacity()==2) {
							d++;
						} else if(r.getCapacity()==3) {
							t++;
						}
					}
				}
				if(s>=ws && d>=wd && t>=wt) {
					found=1;
					foundHotel=h;
					break;
				}
				
				
			}
			if(found==0) {
				continue;
			}
			//Go through the room in the hotel and add them to to result
			s=0;
			d=0;
			t=0;
			for(Room r : foundHotel.getRoom()) {
				// b is the booking for that room
				b=r.getBooking();
				if(b==null) {
					if(r.getCapacity()==1 && s!=ws) {
						result.add(r);
						s++;
					} else if(r.getCapacity()==2 && d!=wd) {
						result.add(r);
						d++;
					} else if(r.getCapacity()==3 && t!=wt) {
						result.add(r);
						t++;
					}
				} else {
					// check the date first
					LocalDate bookingStart = b.getStart(); // start date of that room
					LocalDate bookingEnd = b.getEnd(); //end date of that room
					if(bookingStart.isAfter(end)||bookingStart.isEqual(end)||bookingEnd.isBefore(start) || bookingEnd.isEqual(start)) {
						
						// now check the capacity
						if(r.getCapacity()==1 && s!=ws) {
							result.add(r);
							s++;
						} else if(r.getCapacity()==2 && d!=wd) {
							result.add(r);
							d++;
						} else if(r.getCapacity()==3 && t!=wt) {
							result.add(r);
							t++;
						}
						
					}
				}
				if(s==ws && d==wd && t==wt) {
					return result;
				}
				
				
			}
		}
		
		return null;
	}
	
	public void makeNewBooking(String input, String typeOfBooking) {
		String[] allInput = input.split(" ");
		String name = allInput[1];
	    //System.out.println(name);
	    String booking_date = "2018-"+allInput[2]+"-"+allInput[3];
	    DateTimeFormatter format = DateTimeFormatter.ofPattern("yyyy-MMM-dd");
	    LocalDate date = LocalDate.parse(booking_date, format); // date is the start date
	    int night = Integer.valueOf(allInput[4]);
	    ArrayList<Room> toBeBooked = new ArrayList<Room>();
	  
	    // starting from allInput[5] and so on is the room type and the amount of room booked
	    int singleRoom = 0;
	    int doubleRoom = 0;
	    int tripleRoom = 0;
	    // count the number of single double and triple room wanted
	    for(int i=5;i<allInput.length; i+=2) {
	    	
	    	if(allInput[i].equals("single")) {
	    		
	    		singleRoom+=Integer.parseInt(allInput[i+1]);
	    	} else if(allInput[i].equals("double")) {
	    		
	    		doubleRoom+=Integer.parseInt(allInput[i+1]);
	    	} else if(allInput[i].equals("triple")) {
	    		
	    		tripleRoom+=Integer.parseInt(allInput[i+1]);
	    	}
	    	
	    }
	    /*
	    System.out.println("make book for "+ name);
	  	// testing--------
  		System.out.println("s "+singleRoom);
	  	System.out.println("d "+doubleRoom);
	  	System.out.println("t "+tripleRoom);
	     */
	    
	    
  	  	Hotel wanted = null;
  	  	
  	  	toBeBooked = findARoom(singleRoom, doubleRoom, tripleRoom, date, date.plusDays(night));
  	  	if( toBeBooked==null || toBeBooked.isEmpty()) {
  	  		System.out.println("Booking Rejected");
			return;
  	  	}
  	  	String hotelName = toBeBooked.get(0).getHotel();
	  	for(Hotel p : hotels) {
	  		if(p.getHotelName().equals(hotelName)) {
	  			wanted = p;
	  			break;
	  		}
	  	}
  	  	
  		System.out.print(typeOfBooking+" ");
	  	
  	  	wanted.makeBooking(toBeBooked, name, date, night);
  	  	
  	  	
	}
	
	public void cancelBooking(String input, String typeOfInput) {
		String[] allInput = input.split(" ");
		String name = allInput[1];
		
		int found = 0;
		for (Hotel h : hotels) {
			ArrayList<Booking> hotelBookings = h.getBookings();
			found = 0;
			int hotelIndex = -1;
			for(Booking b : hotelBookings) {
				if(b.getName().equals(name)) {
					found=1;
					hotelIndex=hotels.indexOf(h);
				}
				
			}
			if(found==1) {
				Hotel rem = hotels.get(hotelIndex);
				rem.cancelBooking(name, typeOfInput);
				break;
			}
  	  	}
		if (found==0) {
  	  		// if no room was found just exit and dont print anything
  	  		return;
  	  	}
	}
	
	public void changeBooking(String input) {
		String[] allInput = input.split(" ");
		String name = allInput[1];
		cancelBooking(name, "Change");
		makeNewBooking(input, "Change");
		
	}
	
	public void printBooking(String hotelName) {
		Hotel h = hotelExist(hotelName);
		
		if(h==null) {
			System.out.println("Hotel not found");
			return;
		} else {
			
			ArrayList<Booking> allBookings = h.getBookings();
			ArrayList<Room> allRooms = h.getRoom();
			for(Room r : allRooms) {
				//System.out.println(r.getHotel()+" "+r.getRoomNumber());
				if(!r.booking.equals(null)) {
					System.out.println(r.getHotel()+" "+r.getRoomNumber());
				}
			}
			for(Booking b : allBookings) {
				System.out.println(b.printBook());
			}
		}
	}
	
	public static void main (String args[]) {
		  Scanner sc = null;
		  HotelBookingSystem hotelSys= new HotelBookingSystem();

	      try
	      {
	    	  // args[0] is the first command line argument	    	  
	    	  sc = new Scanner(new File(args[0]));
	    	  // Read input from the scanner here
	          while(sc.hasNextLine()) { // go through all lines in input
		    	  String input = sc.nextLine();
		          String[] allInput = input.split(" ");
		          if(allInput[0].equals("Hotel")) { // Handles hotel creation
		        	  hotelSys.makeNewHotel(input);
		        	  
		          } else if (allInput[0].equals("Booking")) { // Handles booking creation
		        	  hotelSys.makeNewBooking(input, "Booking");
		        	  
		          } else if (allInput[0].equals("Cancel")) {
		        	  hotelSys.cancelBooking(input, "Booking");
		        	  
		          } else if (allInput[0].equals("Change")) {
		        	  hotelSys.cancelBooking(input, "Change");
		        	  hotelSys.makeNewBooking(input, "Change");
		          } else if (allInput[0].equals("Print")) {
		        	  hotelSys.printBooking(allInput[1]);
		          }
	          }
	      }
	      catch (FileNotFoundException e)
	      {
	          System.out.println(e.getMessage());
	      }
	      finally
	      {
	          if (sc != null) sc.close();
	      }
	}
}
